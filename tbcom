import { Component } from '@angular/core';

@Component({
  selector: 'app-table',
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.css']
})
export class TableComponent {
  users: { name: string; email: string; phone: string }[] = [
    // User data array
    { name: 'First Page', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'AAAAA', email: 'jane@example.com', phone: '987-654-3210' },
    { name: 'John Doe', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'Jane Smith', email: 'jane@example.com', phone: '987-654-3210' },
    { name: 'John Doe', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'Jane Smith', email: 'jane@example.com', phone: '987-654-3210' },
    { name: 'First', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'First', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'First', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'First', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'First', email: 'john@example.com', phone: '123-456-7890' },
    { name: 'First', email: 'john@example.com', phone: '123-456-7890' },   
    { name: 'Jane Smith', email: 'jane@example.com', phone: '987-654-3210' },

  ];

  searchTerm: string = '';
  sortColumn: string = '';
  sortDirection: 'asc' | 'desc' = 'asc';
  currentPage: number = 1;
  pageSize: number = 10;
  totalPages: number = 1;
  goToPageNumber: number = 1;
  recordsPerPage: number = 10;
  recordsOptions: number[] = [10, 20, 50];

  get pagedUsers(): { name: string; email: string; phone: string }[] {
    const startIndex = (this.currentPage - 1) * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    return this.filteredUsers.slice(startIndex, endIndex);
  }

  ngOnInit() {
    this.calculateTotalPages();
  }

  sort(column: string): void {
    if (this.sortColumn === column) {
      this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      this.sortColumn = column;
      this.sortDirection = 'asc';
    }
  }

  goToPage(): void {
    if (this.goToPageNumber >= 1 && this.goToPageNumber <= this.totalPages) {
      this.currentPage = this.goToPageNumber;
    }
  }

  calculateTotalPages(): void {
    this.totalPages = Math.ceil(this.filteredUsers.length / this.pageSize);
  }

  previousPage(): void {
    if (this.currentPage > 1) {
      this.currentPage--;
    }
  }

  nextPage(): void {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
    }
  }

  updatePageSize(): void {
    this.pageSize = this.recordsPerPage;
    this.calculateTotalPages();
    this.currentPage = 1;
  }

  search(): void {
    this.currentPage = 1;
    this.calculateTotalPages();
  }

  get filteredUsers(): { name: string; email: string; phone: string }[] {
    return this.users.filter((user) => {
      const lowerCaseSearchTerm = this.searchTerm.toLowerCase();
      return (
        user.name.toLowerCase().includes(lowerCaseSearchTerm) ||
        user.email.toLowerCase().includes(lowerCaseSearchTerm) ||
        user.phone.toLowerCase().includes(lowerCaseSearchTerm)
      );
    }).sort((a: { [key: string]: string }, b: { [key: string]: string }) => {
      const direction = this.sortDirection === 'asc' ? 1 : -1;
      if (a[this.sortColumn] < b[this.sortColumn]) return -1 * direction;
      if (a[this.sortColumn] > b[this.sortColumn]) return 1 * direction;
      return 0;
    });
  }
}

-----------------


<div class="overflow-x-auto">
    <div class="search-container">
      <div class="search-icon">
        <!-- Add your search icon here -->
      </div>
      <input type="text" [(ngModel)]="searchTerm" (ngModelChange)="search()" placeholder="Search" class="search" />
    </div>
  
    <table class="table table-bordered">
      <thead>
        <tr>
          <th (click)="sort('name')" class="p-2 cursor-pointer bg-sky-950">Name</th>
          <th (click)="sort('email')" class="p-2 cursor-pointer bg-sky-950">Email</th>
          <th (click)="sort('phone')" class="p-2 cursor-pointer bg-sky-950">Phone</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let user of pagedUsers">
          <td [innerHTML]="user.name | highlight: searchTerm" [class.highlighted]="searchTerm && user.name.includes(searchTerm)"></td>
          <td [innerHTML]="user.email | highlight: searchTerm" [class.highlighted]="searchTerm && user.email.includes(searchTerm)"></td>
          <td [innerHTML]="user.phone | highlight: searchTerm" [class.highlighted]="searchTerm && user.phone.includes(searchTerm)"></td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="dropdown">
    <button class="dropdown-btn">
      <div class="logo"></div>
    </button>
    <div class="dropdown-content">
      <a href="#">Option 1</a>
      <a href="#">Option 2</a>
      <a href="#">Option 3</a>
    </div>
  </div>
  
  <div class="pagination flex justify-center items-center">
    <div class="flex gap-3">
      <button class="btn btn-primary btn-sm" (click)="previousPage()" [disabled]="currentPage === 1">Previous</button>
      <span>Page {{ currentPage }} of {{ totalPages }}</span>
      <button class="btn btn-primary btn-sm" (click)="nextPage()" [disabled]="currentPage === totalPages">Next</button>
    </div>
  </div>
  
  <div class="show-records flex items-center">
    <div class="flex gap-3">
      <select id="recordsPerPage" class="btn btn-primary btn-sm" [(ngModel)]="recordsPerPage" (change)="updatePageSize()">
        <option *ngFor="let option of recordsOptions" [value]="option">{{ option }} Records</option>
      </select>
      <div class="go-to-page">
        <label for="pageInput">Go to Page:</label>
        <input type="number" id="pageInput" class="btn btn-primary btn-sm" [(ngModel)]="goToPageNumber" min="1" max="{{ totalPages }}" (keyup.enter)="goToPage()" />
      </div>
    </div>
  </div>
  
  -------------
  
  .table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .table th,
  .table td {
    padding: 0.5rem;
    border: 1px solid #e2e8f0;
    cursor: pointer;
    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
  }
  
  
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 0rem;
  }
  
  .highlight {
    background-color: yellow;
    font-weight: bold;
  }
  
  .go-to-page {
    margin-top: 1rem;
    display: flex;
    align-items: center;
  }
  
  .go-to-page label {
    margin-right: 0rem;
  }
  
  .go-to-page input {
    width: 4rem;
    padding: 0.25rem;
  }
  
  .go-to-page button {
    display: flex;
    margin-left: 0.5rem;
    padding: 0.25rem 0.5rem;
  }
  
  .show-records {
    margin-top: 1rem;
    display: flex;
    align-items: center;
  }
  
  .show-records select {
    width: 6rem;
    padding: 0.25rem;
  }
  
  .btn {
    display: inline-block;
    font-weight: 500;
    text-align: center;
    border-radius: 0.375rem;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    transition: background-color 0.2s ease;
  }
  
  .btn-primary {
    background-color: #6875f5;
    color: #fff;
  }
  
  .btn-primary:hover {
    background-color: #4c57d8;
  }
  
  .btn-primary:focus {
    box-shadow: 0 0 0 3px rgba(104, 117, 245, 0.5);
  }
  
  .btn-primary:active {
    background-color: #3039b8;
  }
  
  .btn-disabled {
    opacity: 0.6;
    pointer-events: none;
  }
  
  .btn-disabled:hover {
    background-color: #6875f5;
  }
  
  .btn-disabled:focus {
    box-shadow: none;
  }
  
  .btn-disabled:active {
    background-color: #6875f5;
  }
  
  .btn-sm {
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    line-height: 1rem;
  }
  
  .btn-lg {
    padding: 0.75rem 1.5rem;
    font-size: 1.125rem;
    line-height: 1.75rem;
  }
  
  /* Custom Styles */
  .search-container {
    display: flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    background-color: #f0f2f5;
    width: fit-content;
  }
  
  .search {
    flex-grow: 1;
    margin-left: 0rem;
  }
  
  .search input {
    width: 100%;
    padding: 0.5rem;
    border: none;
    border-radius: 0.375rem;
    background-color: transparent;
    outline: none;
    font-size: 1rem;
  }
  
  .search input::placeholder {
    color: #718096;
  }
  
  .search-icon {
    margin-right: 0.5rem;
    color: #a0aec0;
  }
  
 
  .dropdown {
    position: relative;
    display: inline-block;
  }
  
  .dropdown-content {
    display: none;
    position: absolute;
    min-width: 160px;
    padding: 0.5rem;
    z-index: 1;
    background-color: #fff;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  }
  
  .dropdown:hover .dropdown-content {
    display: block;
  }
  
  .dropdown-item {
    cursor: pointer;
    padding: 0.25rem 0;
  }
  
  .dropdown-item:hover {
    color: #6875f5;
  }
  
  .actions {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .actions button {
    margin-left: 0.5rem;
  }
  .highlighted {
    background-color: yellow;
    font-weight: bold;
  }
  .dropdown {
    position: relative;
    display: inline-block;
  }
  
  .dropdown-btn {
    background: none;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    padding: 5px;
  }
  
  
  .logo {
    width: 20px;
    height: 3px;
    background-color: black;
    margin-bottom: 3px;
  }
  
  .dropdown-content {
    display: none;
    position: absolute;
    background-color: white;
    min-width: 160px;
    padding: 5px 0;
    border: 1px solid #ccc;
  }
  
  .dropdown:hover .dropdown-content {
    display: block;
  }
  
  .dropdown-content a {
    display: block;
    padding: 8px 16px;
    text-decoration: none;
    color: black;
  }
  
  .dropdown-content a:hover {
    background-color: #f1f1f1;
  }
  
  
