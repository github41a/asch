import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

sales_data = pd.DataFrame({
    'Feature1': [35.12, 14.56, 44.78, 10.12, 47.32, 19.65, 10.12, 14.56, 35.12, 44.78, 25.33, 18.75, 48.92, 10.12, 42.11, 27.89, 10.12, 22.65, 35.12, 41.24, 30.75],
    'Feature2': [21.75, 24.89, 34.23, 25.67, 24.12, 40.01, 25.67, 24.89, 21.75, 34.23, 18.45, 33.21, 23.58, 25.67, 20.33, 38.45, 25.67, 37.1, 21.75, 29.87, 36.29],
    'Feature3': [31.46, 39.01, 36.74, 34.82, 30.05, 36.19, 34.82, 39.01, 31.46, 36.74, 35.88, 31.42, 32.1, 34.82, 38.75, 32.67, 34.82, 33.12, 31.46, 35.67, 37.58],
    'Labels': ['LabelA', 'LabelB', None, 'LabelA', None, 'LabelB', 'LabelC', None, 'LabelD', 'LabelC', 'LabelE', None, None, 'LabelA', None, 'LabelB', None, None, 'LabelA', None, 'LabelB']
})

sales_data.fillna(0, inplace=True)

scaler = StandardScaler()
scaled_sales_data = scaler.fit_transform(sales_data[['Feature1', 'Feature2', 'Feature3']])

cluster_range = range(2, 4)
best_num_clusters = 2
best_silhouette_score = -1

for num_clusters in cluster_range:
    kmeans = KMeans(n_clusters=num_clusters, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_sales_data)
    silhouette_avg = silhouette_score(scaled_sales_data, cluster_labels)
    
    if silhouette_avg > best_silhouette_score:
        best_silhouette_score = silhouette_avg
        best_num_clusters = num_clusters

kmeans = KMeans(n_clusters=best_num_clusters, random_state=42)
sales_data['Cluster'] = kmeans.fit_predict(scaled_sales_data)

def generate_commentary(row):
    if row['Cluster'] == 0:
        return "This day should see strong sales growth."
    elif row['Cluster'] == 1:
        return "Sales are expected to be slow this day."
    elif row['Cluster'] == 2:
        return "We anticipate moderate sales today."

sales_data['Commentary'] = sales_data.apply(generate_commentary, axis=1)

output_sales_data = sales_data[['Feature1', 'Feature2', 'Feature3', 'Labels', 'Cluster', 'Commentary']]
print(output_sales_data)
