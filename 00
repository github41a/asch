import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Load data from an Excel file
excel_file_path = 'sales.xlsx'
sales_data = pd.read_excel(excel_file_path, sheet_name='Sheet1')
sales_data.columns = sales_data.columns.str.strip()

# Fill missing values with 0
sales_data.fillna(0, inplace=True)

# Convert selected columns to numeric data types
numeric_features = ['Feature1', 'Feature2', 'Feature3']
sales_data[numeric_features] = sales_data[numeric_features].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values (if any)
sales_data.dropna(subset=numeric_features, inplace=True)

# Extract numerical features for clustering
scaled_sales_data = StandardScaler().fit_transform(sales_data[numeric_features])

# Determine the best number of clusters using silhouette score
cluster_range = range(2, 4)
best_num_clusters = 2
best_silhouette_score = -1

for num_clusters in cluster_range:
    kmeans = KMeans(n_clusters=num_clusters, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_sales_data)
    silhouette_avg = silhouette_score(scaled_sales_data, cluster_labels)
    
    if silhouette_avg > best_silhouette_score:
        best_silhouette_score = silhouette_avg
        best_num_clusters = num_clusters

# Perform K-Means clustering with the best number of clusters
kmeans = KMeans(n_clusters=best_num_clusters, random_state=42)
sales_data['Cluster'] = kmeans.fit_predict(scaled_sales_data)

# Calculate daily sales growth or decline based on previous day's data
sales_data['Prev_Day_Sales'] = sales_data.groupby(['Labels'])['Feature1'].shift(1)
sales_data['Sales_Growth'] = ((sales_data['Feature1'] - sales_data['Prev_Day_Sales']) / sales_data['Prev_Day_Sales']) * 100

# Define a function to generate commentary based on cluster assignments and sales growth
def generate_commentary(row):
    cluster_id = row['Cluster']
    sales_growth = row['Sales_Growth']
    
    if cluster_id == 0:
        return f"This day should see strong sales growth by {sales_growth:.2f}% based on previous day's data."
    elif cluster_id == 1:
        return f"Sales are expected to be slow this day by {sales_growth:.2f}% based on previous day's data."
    # Add more conditions if needed for additional clusters

# Apply the generate_commentary function to each row
sales_data['Commentary'] = sales_data.apply(generate_commentary, axis=1)

# Print or save the output
pd.set_option('display.max_colwidth', None)
output_sales_data = sales_data[['Feature1', 'Feature2', 'Feature3', 'Labels', 'Cluster', 'Commentary']]
print(output_sales_data)
