#!/bin/bash

# Load the environment variables
source ./apps/axiom_app/boe/batch/scripts/environment/gsib_reg.env

# Define the file path and name pattern for the data files
filepath_name=$(ls "$BCE_PROCESSED"/2023_Q1/GSIB_BS_Actual_*.txt)

# Define the control file for SQL*Loader
ctlfilename="$REGSH/gsib/race/axiom_gsib_race_load.ctl"

# Get the current date for log file naming
date_tm=$(date +"%d %b %Y")
log_file="$BCELOG/Race_Data_Load_${date_tm}.log"

# Use SQL*Loader to load data into the database
sqlldr USERID="$REG_LOGIN" control="$ctlfilename" data="$filepath_name" log="$log_file"

# Get the exit status of SQL*Loader
exit_status=$?

# Check if SQL*Loader ran successfully
if [ $exit_status -eq 0 ]; then
    # Calculate and create dynamic partitions
    sqlplus -s "$REG_LOGIN" <<EOF
        WHENEVER SQLERROR EXIT SQL.SQLCODE
        DECLARE
            CURSOR c_data IS
                SELECT DISTINCT RACE_YEAR, PERIOD FROM GSIB_AXIOM_DATA.GSIB_RACE_DATA_STAGE;
        BEGIN
            FOR rec IN c_data LOOP
                DECLARE
                    v_partition_name VARCHAR2(20);
                BEGIN
                    -- Calculate partition name (e.g., Mar23)
                    v_partition_name := TO_CHAR(TO_DATE(rec.PERIOD || rec.RACE_YEAR, 'MonYY'), 'MonYY');
                    -- Check if partition already exists
                    EXECUTE IMMEDIATE 'SELECT PARTITION_NAME FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = ''GSIB_RACE_DATA_STAGE'' AND PARTITION_NAME = ''P_' || v_partition_name || ''''
                    INTO v_partition_name;
                    IF v_partition_name IS NULL THEN
                        -- Create partition
                        EXECUTE IMMEDIATE 'ALTER TABLE GSIB_RACE_DATA_STAGE ADD PARTITION P_' || v_partition_name ||
                            ' VALUES LESS THAN (''' || v_partition_name || ''')';
                    END IF;
                    -- Update PARTITION_KEY
                    EXECUTE IMMEDIATE 'UPDATE GSIB_RACE_DATA_STAGE SET PARTITION_KEY = ''' || v_partition_name || ''' ' ||
                        'WHERE RACE_YEAR = ''' || rec.RACE_YEAR || ''' AND PERIOD = ''' || rec.PERIOD || '''';
                EXCEPTION
                    WHEN OTHERS THEN
                        ROLLBACK;
                        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
                END;
            END LOOP;
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        END;
        /
EOF

    # Exit status of dynamic partition creation
    partition_exit_status=$?

    if [ $partition_exit_status -eq 0 ]; then
        echo "Dynamic partitions and PARTITION_KEY updates created successfully"
    else
        echo "Error creating dynamic partitions and PARTITION_KEY updates"
    fi

    exit $partition_exit_status
else
    echo "SQL Loader had errors. No dynamic partitions or PARTITION_KEY updates created."
    exit $exit_status
fi
