import express from 'express';
import { DataFrame } from 'dataframe-js';
import * as XLSX from 'xlsx';

// Create an Express.js app
const app = express();
const port = 3000;

interface ExcelData {
  CI_Count: number;
  Incident_Count: number;
  Total_Cost: number;
  Storage_Cost: number;
  Database_Cost: number;
  // Add other columns as needed
}

// Route for handling the HTTP GET request
app.get('/', async (req, res) => {
  try {
    // Read data from Excel file (MasterSheet.xlsx) and convert to DataFrame
    const data: DataFrame = await readExcelData('MasterSheet.xlsx');

    // Perform calculations and formatting
    const TotalCI: number = calculateSum(data, 'CI_Count');
    const TotalIC: number = calculateSum(data, 'Incident_Count');
    const TotalTC: number = calculateSum(data, 'Total_Cost');
    const TotalSC: number = calculateSum(data, 'Storage_Cost');
    const TotalDC: number = calculateSum(data, 'Database_Cost');

    const formattedTotalTC: string = formatCurrency(TotalTC);
    const formattedTotalSC: string = formatCurrency(TotalSC);
    const formattedTotalDC: string = formatCurrency(TotalDC);

    const roundedTotalCI: number = roundValue(TotalCI);
    const roundedTotalIC: number = roundValue(TotalIC);

    // Prepare the response JSON object
    const response = {
      TotalCI,
      TotalIC,
      TotalTC: formattedTotalTC,
      TotalSC: formattedTotalSC,
      TotalDC: formattedTotalDC,
      RoundedTotalCI: roundedTotalCI,
      RoundedTotalIC: roundedTotalIC,
    };

    // Send the response as JSON
    res.json(response);
  } catch (error) {
    console.error('Error:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Read Excel data from file and convert to DataFrame
async function readExcelData(filename: string): Promise<DataFrame> {
  return new Promise((resolve, reject) => {
    XLSX.readFile(filename, (error, workbook) => {
      if (error) {
        reject(error);
      } else {
        const worksheet: XLSX.WorkSheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData: any[] = XLSX.utils.sheet_to_json(worksheet);

        const excelData: ExcelData[] = jsonData.map((item: any) => ({
          CI_Count: Number(item.CI_Count),
          Incident_Count: Number(item.Incident_Count),
          Total_Cost: Number(item.Total_Cost),
          Storage_Cost: Number(item.Storage_Cost),
          Database_Cost: Number(item.Database_Cost),
          // Add other columns as needed
        }));

        const df = new DataFrame(excelData);
        resolve(df);
      }
    });
  });
}

// Currency formatting
function formatCurrency(value: number): string {
  return `$${value.toFixed(2)}`;
}

// Rounding decimal values
function roundValue(value: number): number {
  return Math.round(value);
}

// Calculation: Sum of a specific column
function calculateSum(data: DataFrame, column: keyof ExcelData): number {
  return data
    .getColumn(column)
    .toArray()
    .reduce((sum: number, item: number) => sum + item, 0);
}

// Start the server
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
